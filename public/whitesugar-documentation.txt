WhiteSugar Documentation

 - Application setup

 WhiteSugar CMS will be a single page app using backbone on the frontend and laravel on the backend. The page will be loaded once and the user will navigate around the entire CMS without having to refresh, creating a very user friendly experience. Every module will have security which checks whether the user has access to that module. 

 **Once a page is loaded, all the links will be handled with backbone. The website will not refresh when a link is clicked. However, views must be served from laravel if a page is refreshed. For example, I may navigate to /modules with backbone routers, but when the page is refreshed /modules still needs to serve up the same view as backbone did. 

 The api will be pronounced by /data. So if I want to get all pages, I will send a GET request to /data/pages and expect to receive all rows for pages in JSON. Similarily, if I send a GET request to /data/pages/23, I would expect to receive data in JSON for only the page with an ID of 23.

 - Phase 1 Modules an Nav

Summary:
WhiteSugar CMS is to be an interactive content management system with an easy to use UI. It will make it easy for developers and clients alike to manage content both on the clients front-side website, as well as the back end CMS. 

In the first phase, we will build the basic roots of sugar. The first phase will consist of building an interface where developers can manage "modules" enabled on the CMS. The modules will be represented on the nav and be viewable by all users of the CMS but only changable by the root admins of the CMS (the developers). 

There are three different navigation areas which will be defined as follows. The settings-nav (very top right, represented by "settings, configuration, logout" in whitelabel), the header-nav (the white buttons directly right of the whitelabel logo), and the nav (the main nav for the CMS on the left). The settings-nav is where we will include all root admin features such as module creation, permissions overrides, etc. Each module will have its own header-nav which will be updated every time the user navigates into the corresponding module. 

Although this is the first phase, we need to plan for two more phases as well. The first solid version of WhiteSugar will consist of an air-tight system including modules, permissions, and users. All three of these features will be vital to producing a solid, secure product. We are starting on modules because it is the most root functionality of the CMS, but we will build it with permissions and users in mind. We will assume that only developers or CMS admins will have access to these features. 

Modules:
	Features to build:
	-Create Module Type
		The developer will create a representation for a module already existing in the project folder.
		Each module will have a "keyword" which will correspond with the model name of the module in the code eg. "users, pages, gallery".
		Required Parameters:
		-Title
		-Keyword
		-Enabled/Disabled
	-Delete Module Type
		The developer can delete a module type
	-Edit Module Type
		The developer can update the module keyword, and enable/disable the module.
		**Disabling the module at this point will not do anything. All that is important is that we store a value on the db that identifies the module as enabled/disabled. We will build out the security and permissions features in phase 2.

Navigations:
	-Create Nav Item
		The developer will enter the name of the nav item and select the type (either nav , sub-nav or header-nav). If the developer chooses nav or sub-nav, they will be asked to either enter a link where the nav item will lead or select a module type, where the nav
		Required Parameters:
		-Title (What will appear as the title for this nav item)
		-Type (Either header-nav, sub-nav, or nav)
		**If sub-nav or header-nav, they must also select a nav item for it's parent which it will be nested under in the nav. See the documentation nav item in whitelabel.
		-Link (A URL of a specific page or a module.)
		**If the link is to a disabled module, the module will show a "page restricted" view.
	-Delete Nav Item
		The developer can delete the navigation item
		**If the item has an sub-navs or header-navs with it as a parent, warn the user.
	-Edit Nav Item
		The developer can edit the title, type, and link of the nav item.
	-Order Nav Items
		This will be a separate view where the develoer will use a drag and drop ui to re-order the nav items to the order they want. Each nav item will have a value of "position" on the database. After each change made with the ui, an ajax request will be made to the server sending an array following this format [id : newPosition, id : newPosition].


	Phase 2 - Users and Permissions